name: Build and Package Plugin

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SR_SECRET: ${{ secrets.SR_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: Build with Maven
        run: mvn clean package

      - name: Create builds directory
        run: mkdir -p builds

      - name: Copy JAR to builds directory
        run: cp target/StatsReloaded-*.jar builds/statsreloaded.jar

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: StatsReloaded-plugin
          path: builds/statsreloaded.jar
          retention-days: 30

      - name: Upload to releases (on release)
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./builds/statsreloaded.jar
          asset_name: StatsReloaded-${{ github.event.release.tag_name }}.jar
          asset_content_type: application/java-archive

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: StatsReloaded-plugin
          path: builds/

      - name: Generate release notes
        id: release_notes
        run: |
          # Check if there are any tags
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            # Get the latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0)
            
            # Get commits since last tag
            COMMITS=$(git log --pretty=format:"- %s" ${LATEST_TAG}..HEAD)
            
            # Generate new version (increment patch version)
            CURRENT_VERSION=$(echo $LATEST_TAG | sed 's/v//')
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            NEW_PATCH=$((VERSION_PARTS[2] + 1))
            NEW_VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH"
          else
            # No tags exist, start with v1.0.0
            COMMITS=$(git log --pretty=format:"- %s")
            NEW_VERSION="v1.0.0"
          fi

          if [ -z "$COMMITS" ]; then
            COMMITS="- Initial release"
          fi

          # Create release notes
          RELEASE_NOTES="## What's Changed

          $COMMITS

          ## Download
          Download the latest version of StatsReloaded plugin."

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_notes.outputs.new_version }}
          release_name: StatsReloaded ${{ steps.release_notes.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Get Release Upload URL
        id: get_upload_url
        run: |
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/latest --jq '.id')
          UPLOAD_URL=$(gh api repos/${{ github.repository }}/releases/$RELEASE_ID --jq '.upload_url' | sed 's/{?name,label}//')
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ./builds/statsreloaded.jar
          asset_name: StatsReloaded-${{ steps.release_notes.outputs.new_version }}.jar
          asset_content_type: application/java-archive
